 * 내장 객체
    - String
    - Date
    - Array
    - Math

 * 브라우저 객체 모델 (Browser Object Model, BOM)
    - window
        창 정보를 제공하는 객체
         * window.innerWidth            - 웹 브라우저의 너비값을 반환하는 속성
         * window.innerHeight           - 웹 브라우저의 높이값을 반환하는 속성

         * window.alert()               - 알림창을 나타내는 함수
         * window.confirm()             - 확인창을 나타내는 함수
         * window.prompt()              - 사용자로부터 문자열을 받는 함수
         * window.open()                - URL 페이지를 새 창으로 나타내는 함수
         * window.close()               - 창을 닫는 함수
         * window.setInterval()         - 일정한 시간 간격으로 실행문을 반복하는 함수
         * window.clearInterval()       - setInterval()로 인해 자동으로 반복되는 메소드를 취소하는 함수
            
    - screen
        모니터 해상도 정보를 제공하는 객체
         * screen.width             - 화면의 너비값을 반환하는 속성
         * screen.height            - 화면의 높이값을 반환하는 속성
         * screen.availWidth        - 작업표시줄을 제외한 화면의 너비값을 반환하는 속성
         * screen.availHeight       - 작업표시줄을 제외한 화면의 높이값을 반환하는 속성
         * screen.colorDepth        - 모니터가 표현 가능한 색상 bit를 반환하는 속성

    - location
        웹브라우저 주소창에 입력되는 정보를 제공하는 객체
         * location.href            - 주소 영역의 참조 주소를 설정하거나 URL을 반환하는 속성
         * location.hash            - URL의 해시값을 반환하는 속성
         * location.hostname        - URL의 호스트 이름을 설정하거나 반환하는 속성
         * location.host            - URL의 호스트 이름과 포트 번호를 반환하는 속성
         * location.protocol        - URL의 프로토콜을 반환하는 속성
         * location.search          - URL의 쿼리를 반환하는 속성

         * location.reload()        - 브라우저를 새로고침하는 함수

    - history
        사용자가 방문한 사이트의 기록을 남기고 이전 방문 사이트와 다음 방문 사이트로 다시 돌아 갈 수 있는 속성과 메소드를 제공하는 객체
         * history.length           - 방문 기록에 저장된 목록의 개수를 반환하는 속성
         
         * history.back()           - 이전 방문 사이트로 이동하는 함수
         * history.forward()        - 다음 방문 사이트로 이동하는 함수
         * history.go()             - 이동 숫자에 -2를 입력하면 2단계 이전의 방문사이트로 이동하는 함수

    - 그 외 다수

 * 문서 객체 모델 (Document Object Model, DOM)
    - DO (Document Obejct)
        Document    - HTML 문서
        Obejct      - 객체
        - HTML 문서의 모든 구성요소 (<html></html>, <body></body> 등등)
    - DOM
        - HTML문서 내부에 작성된 DO의 구조를 객체화한 모델구조 (DOM 트리)
    
    - 노드 타입
     * 문서 노드 (Node.DOCUMENT_NODE)       - 최상위 document 객체의 노드 타입
     * 요소 노드 (Node.ELEMENT_NODE)        - h1, p 태그와 같은 요소의 노드 타입
     * 속성 노드 (Node.ATTRIBUTE_NODE)      - href, src와 같은 속성의 노드 타입
     * 텍스트 노드 (Node.TEXT_NODE)         - 텍스트에 해당하는 노드 타입
     * 주석 노드 (Node.COMMENT_NONDE)       - 주석에 해당하는 노드 타입

    - 노드 선택
     * 속성으로 노드 선택하기
        - document 최상위 객체는 dom 트리를 탐색하면서 원하는 노드를 선택 할 수 있는 속성들을 제공함
         * 모든 노드 탐색
            parentNode          - 부모 노드를 반환
            childNodes          - 모든 자식 노드를 반환
            firstChild          - 첫 번째 자식 노드를 반환
            lastChild           - 마지막 자식 노드를 반환
            previousSibling     - 이전 형제 노드를 반환
            nextSibling         - 다음 형제 노드를 반환
         * 요소 노드 탐색
            parentElement           - 부모 요소 노드를 반환
            children                - 모든 자식 요소 노드를 반환
            firstElementChild       - 첫 번째 자식 요소 노드를 반환
            lastElementChild        - 마지막 자식 요소 노드를 반환
            previousElementSibling  - 이전 요소 노드를 반환
            nextElementSibling      - 다음 요소 노드를 반환
            
     * 메소드로 노드 선택하기
        - 속성값과 태그명 사용하기 - get method
         ★ getElementById(id 속성 값)              - id 속성값과 일치하는 요소 노드를 1개만 선택
            getElementsByClassName(class 속성 값)   - class 속성값과 일치하는 요소 노드 모두를 선택
            getElementsByTagName(태그명)            - 태그명과 일치하는 요소 노드 모두를 선택
        - css 선택자 사용하기 - query method
         * 매개변수로 css 선택자를 전달 받아 노드를 선택하는 메소드
         ★ querySelector("css 선택자")         - css 선택자에 해당하는 노드를 1개만 선택
            querySelectorAll("css 선택자)       - css 선택자에 해당하는 노드를 모두 선택
    
    - 노드 조작하기
        DOM의 노드를 선택하고 나면 선택한 노드에 여러 조작을 할 수 있음
         * 콘텐츠 조작하기
            textContent         - 요소노드의 모든 텍스트에 접근
            innerText           - 요소노드의 텍스트 중 웹 브라우저에 표시되는 텍스트에만 접근
            innerHTML           - 요소 노드의 텍스트 중 HTML태그를 포함한 텍스트에만 접근
         * 스타일 조작하기
            - 선택한 노드의 타입이 요소 노드라면 css를 지정할 수 있음
         * 클래스 속성 조작하기
            - Js로도 class 속성을 조작해 style을 적용 할 수 있음
                classList.add(...tokens: string[])
                    - class 속성 추가
                classList.remove(...tokens: string[])
                    - class 속성 제거
                classList.toggle(token: string, force?: boolean): boolean
                    - 추가와 삭제 반복
         * 데이터 속성 조작하기
            - data-* 속성은 HTML에서 사용할 수 있는 속성 외에 사용자가 원하는 속성을 추가할 수 있게 한 사용자 정의 속성
            - JavaScript의 dataset 속성을 사용해 조작할 수 있음
         * 메소드로 속성 조작하기

 * 사용자 정의 객체
    - new Object()로 생성           참고) ob1.html
    - Literal 방식으로 생성         참고) ob1_1.html

    ※ Literal방식이 더 직관적이고 간결하며, 성능이 상대적으로 더 빠르므로 Literal방식으로 객체를 생성하는 것을 지향

    
    # 정규 표현 객체
    -  정규표현(RegExp) 객체는 입력 요소에 데이터를 규칙에 맞게 작성 했는지 판단해서
        알려주는  객체 이다.
    -   내가 지정한 규칙대로 단어가 입력 되었는지, 잘못된 단어를 포함하고 있는지 찾을때 사용함.
    -  정규 표현 객체를 생성하는 기본문법 2가지
        1. let  참조변수 = new RegExp(패턴, 검색옵션);
        2. let  참조변수 = /패턴/검색옵션;
        
        검색옵션을 사용하면 일치하는 단어를 찾을때, 다양한 조건과 규칙을 붙여 검색할 수 있습니다.
        가령, 영문 문자 중 찾고자 하는 단어를 검색할 때, 대문자 소문자를 가리지 않을 것인지, 
        또는 찾고자 하는 문자가 문장 맨 앞에서 부터 일치 하는지 등의 다양한 옵션을 지정할 수 있다.
        
    - 정규 표현 검색 옵션
        종류										설명
        *											0회 이상 일치하는 문자를 검사할때 사용함.
        +											1회 이상 일치하는 문자를 검사할때 사용함.
        i											찾는 문자가 영문일 경우  대-소문자를 구분 하지 않습니다.
        ?											0회 또는 1회, 규칙에 맞는 문자가 있는지 검사 합니다.
        g											옵션에 g가 없으면 데이터의 왼쪽부터 규칙에 일치하는 문자 한 개만 찾지만,
                                        g를 넣으면 규칙에 맞는 모든 문자를 찾습니다.
        m											데이터의 행이 바뀌어도 규칙에 맞는 문자를 찾습니다.
        $											문자열 끝부분에 규칙에 맞는 문자를 찾습니다
        ^											문자열 앞에서부터 규칙에 일치하는 문제를 찾습니다. 또는 부정을 나타냅니다.
        
        \d										숫자 하나를 찾습니다.
        \D										숫자가 아닌 문자 하나를 찾습니다.
        \s											공백 문자(스페이스)를 찾습니다.
        [0~9][A~Z][a~z]				숫자, 대문자 영문, 소문자 영문을 찾습니다.
        \w										알파벳, 숫자, 밑줄(_) 기호를 찾습니다.
        \W										알파벳,숫자, 밑줄(_) 기호를 제외한 문자를 찾습니다.
        a|b										a또는 b인지 검사할때 사용.											
                                        
                                
    - 정규 표현객체의  메서드 	
        ~메서드를 사용하면  지정한 특정 문자 데이터가 정규 표현 규칙에 맞게 작성되었는지 알수 있음.
        
        종류												설명
        test()										지정된 규칙에 맞는 단어가 있으면 true값을 반환함.
        exec()										지정된 규칙에 맞는 단어가 있으면 해당 단어를 반환함.											
                                        
        ------------------->  reg_0b1.html  파일 생성 및 실습											
        ------------------->  reg_0b2.html  파일 생성 및 실습			
                                        
                                        
        https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D